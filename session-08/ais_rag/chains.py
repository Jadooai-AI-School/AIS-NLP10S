from typing import List, Dict, Optional, Any
from jinja2 import Template

class SimpleQAChain:
    def __init__(self, llm):
        # Initializing SimpleQAChain with LLM
        self.llm = llm
        self.qa_prompt = None
        self.history: List[Dict[str, str]] = []  # Store up to 5 previous sessions

    def add_qa_prompt_template(self, qa_prompt: str):
        # Adding a QA prompt template for simple QA
        self.qa_prompt = qa_prompt

    def generate(self, query: str) -> str:
        # Generating a response using the simple QA approach with history

        # Prepare the history context for the LLM
        history_context = "\n".join(
            [f"User: {entry['user']}\nAssistant: {entry['assistant']}" for entry in self.history]
        )

        # Creating the full prompt
        if not self.qa_prompt:
            prompt = f"{history_context}\n\nQuestion: {query}\nAnswer:"
        else:
            # Formatting the QA prompt template with history
            template = Template(self.qa_prompt)
            prompt = template.render(history=history_context, question=query)
        
        # Getting the response from LLM
        response = self.llm.generate(prompt=prompt)

        # Storing the session in history
        self.history.append({"user": query, "assistant": response})

        # Maintaining only the last 5 interactions in history
        if len(self.history) > 5:
            self.history.pop(0)
        
        return response

    def get_history(self) -> List[Dict[str, str]]:
        # Returning the history of interactions
        return self.history

###############################################################################################################
from typing import List, Dict, Optional, Any
from jinja2 import Template

class RetrievalQAChain:
    def __init__(self, llm: Any, retriever: Any):
        """
        Initializes the RetrievalQAChain with an LLM and a retriever.

        :param llm: An instance of a language model (LLM).
        :param retriever: An instance of the Retriever class.
        """
        self.llm = llm
        self.retriever = retriever
        self.qa_prompt = None
        self.history: List[Dict[str, str]] = []  # Store up to 5 previous sessions

    def add_qa_prompt_template(self, qa_prompt: str):
        """
        Adds a QA prompt template for formatting the questions and context.

        :param qa_prompt: A string template for the prompt.
        """
        self.qa_prompt = qa_prompt

    def invoke(self, query: str, stream: bool = False, metadata: bool = False) -> str:
        """
        Processes the user query by retrieving context, formats the prompt using the template,
        and invokes the LLM to generate a response.

        :param query: The user's question or query.
        :param stream: Boolean to indicate if streaming is required.
        :param metadata: Whether to include metadata in the context retrieval.
        :return: The response generated by the LLM.
        """
        # Retrieve context using the provided query
        context = self.retriever.context(query)
        if metadata:
            context = self.retriever.context_with_metadata(query)

        # Prepare the history context for the LLM
        history_context = "\n".join(
            [f"User: {entry['user']}\nAssistant: {entry['assistant']}" for entry in self.history]
        )

        # Create a full prompt
        if not self.qa_prompt:
            prompt = f"Context: {context}\n\n{history_context}\n\nQuestion: {query}\nAnswer:"
        else:
            # Formatting the QA prompt template with history and context
            template = Template(self.qa_prompt)
            prompt = template.render(history=history_context, context=context, question=query)
            #print(prompt)

        # Getting the response from LLM
        response = self.llm.generate(prompt=prompt)

        # Storing the session in history
        self.history.append({"user": query, "assistant": response})

        # Maintaining only the last 5 interactions in history
        if len(self.history) > 5:
            self.history.pop(0)
        
        return response

    def get_history(self) -> List[Dict[str, str]]:
        """
        Returns the history of interactions.
        """
        return self.history
